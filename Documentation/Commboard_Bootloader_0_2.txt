=============================================================================
List of generated methods in project: Commboard_Bootloader_0_2

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "TI1"       (component TimerInt_LDD)
   - TI1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TI1_Disable -Disables the component - it stops signal generation and events calling.

Module "FLASH1"    (component FLASH_LDD)
   - FLASH1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" property is set to "yes" 
                (<Enabled in init. code>) value then the device is also enabled(see the description of the Enable() method). In 
                this case the Enable() method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init() the Deinit() must be called first.
   - FLASH1_Enable -This method enables the flash controller device. This method is intended to be used together with <Disable()
                > method to temporary switch On/Off the device after the device is initialized. This method is required if the 
                <Enabled in init. code> property is set to "no" value.
   - FLASH1_Disable -Disables the flash controller device. When the device is disabled, some component methods should not be 
                called. If so, error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> 
                method to temporary switch on/off the device after the device is initialized. This method is not required. The 
                <Deinit()> method can be used to switch off and uninstall the device.
   - FLASH1_Read -This method sets up a flash memory read operation. The operation itself is performing by defined batches 
                (property <Read batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service).
   - FLASH1_Write -This method sets up a flash memory write operation. The operation itself is performing by defined batches 
                (property <Write batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_Erase -This method sets up a flash memory erase operation. The operation itself is performing by defined batches 
                (property <Erase batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_EraseBlock -This method sets up a flash memory block erase operation. The block erase operation is performed to the 
                flash memory's block specified by the Address parameter.
   - FLASH1_Main -This method is used to perform one batch of a flash memory operation. This method is used to perform batches 
                of all flash memory operations (Write, Read, Erase, EraseBlock, VerifyErasedBlock) when the component works in 
                the polled mode (interrupt service is disabled - property <Interrupt service>). This method performs batches of 
                the read flash memory operation, when the component works in the interrupt triggered mode (interrupt service is 
                enabled). This method is enabled only if the component works in the polled mode or if the Read method is 
                enabled.

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission or 
                method GetSentDataNum to check the state of sending.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception or method GetReceivedDataNum to check the state of receiving.
   - AS1_GetTxCompleteStatus -Returns whether the transmitter has transmitted all characters and there are no other characters 
                in the transmitter's HW FIFO or the shift register. The status flag is accumulated, after calling this method 
                the status is returned and cleared (set to "false" state). This method is available only if a peripheral 
                supports this feature.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.

Module "Cpu"       (component MK64FN1M0LQ12)

===================================================================================
